using Microsoft.VisualStudio.TestTools.UnitTesting;
using Apps.BLL;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Apps.Model;
using System.Web.Script.Serialization;
using Newtonsoft.Json;

namespace Apps.BLL.Tests
{
    [TestClass()]
    public class LeaveManagerTests
    {
        public readonly int DepartmentStakeSize = 10;
        public readonly int PostStakeSize = 10;
        public readonly int LevelStakeSize = 10;
        public readonly int BenefitStakeSize = 10;
        public readonly int PerformanceStakeSize = 10;
        public readonly int EmployeeStakeSize = 10;

        public bool DepartmentAddStake()
        {
            Department e = new Department();

            for (var i = 0; i < DepartmentStakeSize; i++)
            {
                e.name = "Department-" + i;
                e.code = "Dep-" + i;

                OperateResult or = DepartmentManager.Add(e);
                if (or.status == OperateStatus.Error)
                {
                    //Console.WriteLine(or.content);
                    Trace.WriteLine("App Trace >>> " + or.content);
                    return false;
                }
            }

            return true;
        }

        public bool PostAddStake()
        {
            PostInfo e = new PostInfo();

            for (var i = 0; i < PostStakeSize; i++)
            {
                e.name = "PostInfo-" + i;
                OperateResult or = PostManager.Add(e);
                if (or.status == OperateStatus.Error)
                {
                    return false;
                }
            }

            return true;
        }

        public bool LevelAddStake()
        {
            int count = 10;
            LevelInfo e = new LevelInfo();

            for (var i = 0; i < count; i++)
            {
                e.name = "LevelInfo-" + i;
                e.code = "LevelInfo-" + i;
                e.levelSalary = 2000 + i * 500;
                e.fullAttendanceRewards = 100+ i * 50;
                e.seniorityRewardsBase = 200;

                OperateResult or = LevelManager.Add(e);
                if (or.status == OperateStatus.Error)
                {
                    return false;
                }
            }
            return true;
        }

        public bool PerformanceAddStake()
        {
            int count = 10;
            PerformanceInfo e = new PerformanceInfo();

            for (var i = 0; i < count; i++)
            {
                e.code = "PerformanceInfo-" + i;
                e.performanceRewards = 2000 + i * 500;
                OperateResult or = PerformanceManager.Add(e);
                if (or.status == OperateStatus.Error)
                {
                    return false;
                }
            }

            return true;
        }
        public bool BenefitAddStake()
        {
            int count = 10;
            BenefitInfo e = new BenefitInfo();

            for (var i = 0; i < count; i++)
            {
                e.code = "BenefitInfo-" + i;
                e.benefitRewards = 2000 + i * 500;

                OperateResult or = BenefitManager.Add(e);
                if (or.status == OperateStatus.Error)
                {
                    return false;
                }
            }

            return true;
        }

        public string GetEducationFromRandom()
        {
            Random random = new Random();

            int r = random.Next(1, 9);

            switch (r)
            {
                case 1:
                    return "小学";
                case 2:
                    return "初中";
                case 3:
                    return "中专";
                case 4:
                    return "高中";
                case 5:
                    return "专科";
                case 6:
                    return "本科";
                case 7:
                    return "硕士";
                case 8:
                    return "博士";

            }

            return "";
        }

        public DateTime GetTimeFromRandom(DateTime baseTime)
        {
            Random random = new Random();
            int year = baseTime.Year + random.Next(1, 14);
            int month = baseTime.Month + random.Next(1, 12);
            month = month > 11 ? 11 : month;
            int day = random.Next(0, 31);


            return new DateTime(year, month, day);
        }

        public bool EmployeeEntryStake()
        {
            Random random = new Random();
            Employee e = new Employee();

            for (var i = 0; i < EmployeeStakeSize; i++)
            {
                e.name = "Employee-" + i;
                e.departmentId = random.Next(1, DepartmentStakeSize + 1);
                e.number = "Employee-" + i;
                e.postId = random.Next(1, PostStakeSize + 1);
                e.idCard = "45010719880202131" + random.Next(1, 10);
                e.sex = random.Next(1, 3) == 1 ? "男" : "女";
                e.education = GetEducationFromRandom();
                e.state = "试用期";
                e.phone = "1397710543" + i;
                e.experience = i / 10;

                e.salaryInfo = new SalaryInfo()
                {
                    levelId = random.Next(1, LevelStakeSize + 1),
                    performanceId = random.Next(1, PerformanceStakeSize + 1),
                    benefitId = random.Next(1, BenefitStakeSize + 1),
                };

                e.birthday = GetTimeFromRandom(new DateTime(1970, 1 ,1));
                e.entryDate = GetTimeFromRandom(new DateTime(2005, 1, 1));
                e.formalDate = GetTimeFromRandom(e.entryDate.Value.AddMonths(3));
                e.contractBegin = GetTimeFromRandom(new DateTime(2017, 1, 1));
                e.contractEnd = GetTimeFromRandom(e.contractBegin.Value.AddMonths(12));

                OperateResult or = EmployeeManager.Add(e);
                if (or.status == OperateStatus.Error)
                {
                    return false;
                }
            }

            return true;
        }
        public bool EmployeeLeaveStake(int employeeId)
        {
            var or = EmployeeManager.GetById(employeeId);
            if (or.status == OperateStatus.Error  || or.data==null)
            {
                return false;
            }

            var time = GetTimeFromRandom(new DateTime(2018, 1, 1));

            or = EmployeeManager.Leave(employeeId, "离职", time);
            if (or.status == OperateStatus.Error )
            {
                return false;
            }

            return true;
        }
        public bool EmployeeAssessmentStake(string month)
        {
            Random random = new Random();
            AssessmentInfo e = new AssessmentInfo();

            for (var i = 0; i < EmployeeStakeSize; i++)
            {
                e.employeeId = i;
                e.month = month;
                e.benefitScore = random.Next(40, 100);
                e.performanceScore = random.Next(40, 100);
                e.shouldWorkTime = 22;
                e.actualWorkTime = 22;

                var or = AssessmentManager.Add(e);
                if (or.status == OperateStatus.Error)
                {
                    return false;
                }
            }

            return true;
        }
        public bool EmployeeSalaryInputStake(string month)
        {
            Random random = new Random();
            SalaryRecord e = new SalaryRecord();

            QueryParam queryParam = new QueryParam {
                pager = new Pager
                {
                    page = 1,
                    rows = EmployeeStakeSize

                }
            };

            FilterModel filter = new FilterModel
            {
                key = "month",
                value = "2018-7"
            };
            Dictionary<string, FilterModel> filterSet = new Dictionary<string, FilterModel>();
            filterSet.Add(filter.key, filter);
            queryParam.filters = filterSet;

            var or = SalaryRecordManager.GetAssessmentAll(queryParam);
            if (or.status == OperateStatus.Error)
            {
                return false;
            }

            dynamic listAssessment = or.data;
            foreach (var ass in listAssessment)
            {
                var dic = ass as IDictionary<string, object>;

                e.billSerial = ass["billSerial"];
                e.assessmentInfoId = ass["id"];
                e.levelSalary = ass["levelSalary"];
                e.fullAttendanceRewards = ass["fullAttendanceRewards"];
                e.performanceRewards = ass["performanceRewards"];
                e.benefitRewards = ass["benefitRewards"]; 
                e.seniorityRewards = ass["seniorityRewards"]; 
                e.normalOvertimeRewards = ass["normalOvertimeRewards"]; 
                e.holidayOvertimeRewards = ass["holidayOvertimeRewards"]; 
                e.shouldTotal = ass["shouldTotal"];
                e.actualTotal = ass["shouldTotal"];

                or = SalaryRecordManager.Add(e);
                if (or.status == OperateStatus.Error)
                {
                    return false;
                }
            }

            return true;
        }

        [TestMethod()]
        public void LeaveWarningTest()
        {
            //打桩：基础数据
            Assert.AreEqual(true, DepartmentAddStake());
            Assert.AreEqual(true, PostAddStake());
            Assert.AreEqual(true, LevelAddStake());
            Assert.AreEqual(true, PerformanceAddStake());
            Assert.AreEqual(true, BenefitAddStake());


            //打桩：在职员工，离职员工、考核数据
            Assert.AreEqual(true, EmployeeEntryStake());
            Assert.AreEqual(true, EmployeeAssessmentStake("2018-7")) ;
            Assert.AreEqual(true, EmployeeSalaryInputStake("2018-7"));
            Assert.AreEqual(true, EmployeeAssessmentStake("2018-8")) ;
            Assert.AreEqual(true, EmployeeSalaryInputStake("2018-8"));
            Assert.AreEqual(true, EmployeeAssessmentStake("2018-9"));
            Assert.AreEqual(true, EmployeeSalaryInputStake("2018-9"));
            Assert.AreEqual(true, EmployeeAssessmentStake("2018-10"));
            Assert.AreEqual(true, EmployeeSalaryInputStake("2018-10"));
            Assert.AreEqual(true, EmployeeAssessmentStake("2018-11"));
            Assert.AreEqual(true, EmployeeSalaryInputStake("2018-11"));
            Assert.AreEqual(true, EmployeeAssessmentStake("2018-12"));
            Assert.AreEqual(true, EmployeeSalaryInputStake("2018-12"));

            // 先离职
            //Assert.AreEqual(EmployeeLeaveStake(1), true);

        }
    }
}